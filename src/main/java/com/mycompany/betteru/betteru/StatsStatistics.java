/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.betteru.betteru;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.List;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Time;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author James
 */
public class StatsStatistics extends javax.swing.JFrame {

    /**
     * Creates new form StatsStatistics
     */
    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DefaultTableModel model = new DefaultTableModel();
    String LoggedInUser = null;
    ArrayList<Integer> ids = null;

    public StatsStatistics(String User) {
        initComponents();
        setResizable(false);
        ImageIcon icon = new ImageIcon(this.getClass().getResource("/icon.png"));
        Image image = icon.getImage().getScaledInstance(icon.getIconWidth() * 4, icon.getIconHeight() * 4, Image.SCALE_DEFAULT);
        this.setIconImage(image);
        con = DbConnection.ConnectionDB();
        Color color = new Color(245, 245, 220);
        getContentPane().setBackground(color);
        LoggedInUser = User;
        jLabel5.setText(LoggedInUser);
        updateLblCalorieBMI();
        updateLblCalorieTrackerCalorieCalculator();
        updateLblGeneratedQuotes();
        updateLblGeneratedReminders();
        ReccomendedCaloriesLabel();
        updateLblAverageCaloriesPerDay();
        AverageCalories();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        btnMainMenu = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        lbCalorieBMIlSuggestion = new javax.swing.JLabel();
        lblCalorieGoalToday = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lblGeneratedQuotes = new javax.swing.JLabel();
        lblGeneratedReminders = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        generateCalorieConsumptionGraph = new javax.swing.JButton();
        generateCalorieConsumptionBarChart = new javax.swing.JButton();
        lblRecentCalorieRecommendation = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        generateBMIGraph = new javax.swing.JButton();
        generateBMIBarChart = new javax.swing.JButton();
        lblAverageCaloriesPerDay = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnMainMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Main_Menu35.png"))); // NOI18N
        btnMainMenu.setText("Main Menu");
        btnMainMenu.setFocusPainted(false);
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setText("Suggestion based off BMI & Calorie Data:");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbCalorieBMIlSuggestion.setText("No Suggestions!");

        lblCalorieGoalToday.setText("jLabel2");

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel3.setText("Have you met your Calorie Goal today?");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Suggestions for");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("jLabel5");

        lblGeneratedQuotes.setText("Quote");

        lblGeneratedReminders.setText("Reminder");

        jLabel24.setText("Calories");

        jLabel25.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel25.setText("Most Recent Calorie Reccomendations");
        jLabel25.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel6.setText("How many quotes generated?");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel7.setText("How many reminders Generated?");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel8.setText("How much calories in average meal?");
        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        generateCalorieConsumptionGraph.setText("Generate Calorie Consumption Graph");
        generateCalorieConsumptionGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateCalorieConsumptionGraphActionPerformed(evt);
            }
        });

        generateCalorieConsumptionBarChart.setText("Generate Calorie Consumption Bar Chart");
        generateCalorieConsumptionBarChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateCalorieConsumptionBarChartActionPerformed(evt);
            }
        });

        lblRecentCalorieRecommendation.setText("jLabel2");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel2.setText("Average Calories Consumed in a day");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel9.setText("Graphs");
        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        generateBMIGraph.setText("Generate BMI Graph");
        generateBMIGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBMIGraphActionPerformed(evt);
            }
        });

        generateBMIBarChart.setText("Generate BMI Bar Chart");
        generateBMIBarChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBMIBarChartActionPerformed(evt);
            }
        });

        lblAverageCaloriesPerDay.setText("jLabel10");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addComponent(jSeparator4)
            .addComponent(jSeparator7)
            .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator6)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblGeneratedReminders))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(340, 340, 340)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(336, 336, 336)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel24))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblAverageCaloriesPerDay))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(jLabel3)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jSeparator2)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMainMenu))
                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbCalorieBMIlSuggestion)
                    .addComponent(lblCalorieGoalToday)
                    .addComponent(lblGeneratedQuotes)
                    .addComponent(lblRecentCalorieRecommendation)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(307, 307, 307)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel8))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(325, 325, 325)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addComponent(jLabel25))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(319, 319, 319)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(417, 417, 417)
                        .addComponent(jLabel9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(generateBMIGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(generateCalorieConsumptionGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(generateCalorieConsumptionBarChart, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                            .addComponent(generateBMIBarChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(185, 185, 185)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(lbCalorieBMIlSuggestion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel3)
                .addGap(31, 31, 31)
                .addComponent(lblCalorieGoalToday)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(20, 20, 20)
                .addComponent(lblGeneratedQuotes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(25, 25, 25)
                .addComponent(lblGeneratedReminders)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addGap(29, 29, 29)
                .addComponent(lblRecentCalorieRecommendation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(20, 20, 20)
                .addComponent(lblAverageCaloriesPerDay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateCalorieConsumptionGraph)
                    .addComponent(generateCalorieConsumptionBarChart))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateBMIBarChart)
                    .addComponent(generateBMIGraph))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        dispose();
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void generateCalorieConsumptionGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateCalorieConsumptionGraphActionPerformed
        graphCalories();
    }//GEN-LAST:event_generateCalorieConsumptionGraphActionPerformed

    private void generateCalorieConsumptionBarChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateCalorieConsumptionBarChartActionPerformed
        barChartCalories();
    }//GEN-LAST:event_generateCalorieConsumptionBarChartActionPerformed

    private void generateBMIGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBMIGraphActionPerformed
        graphBMI();
    }//GEN-LAST:event_generateBMIGraphActionPerformed

    private void generateBMIBarChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBMIBarChartActionPerformed
        barChartBMI();
    }//GEN-LAST:event_generateBMIBarChartActionPerformed

    /**
     * @param args the command line arguments
     */
    public void updateLblCalorieBMI() {
        con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
        if (con != null) {
            String sqlB = "SELECT id, BMI, User FROM CalculatorBMI WHERE User = '" + LoggedInUser + "' ORDER BY id DESC LIMIT 1";
            System.out.println(sqlB);
            double BMIData = 0;
            boolean bmiDataAvailable = false;

            try {
                pst = con.prepareStatement(sqlB);
                rs = pst.executeQuery();

                while (rs.next()) {
                    BMIData = rs.getDouble("BMI");
                    bmiDataAvailable = true;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (pst != null) {
                    try {
                        pst.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }

            String sqlC = "SELECT Calories FROM CalorieTrack WHERE User = '" + LoggedInUser + "' AND Date = (SELECT Date FROM CalorieTrack WHERE User = '" + LoggedInUser + "' ORDER BY Date DESC LIMIT 1)";
            System.out.println(sqlC);
            int Total = 0;
            boolean calorieDataAvailable = false;

            try {
                pst = con.prepareStatement(sqlC);
                rs = pst.executeQuery();

                while (rs.next()) {
                    int CalorieData = rs.getInt("Calories");
                    Total = Total + CalorieData;
                    calorieDataAvailable = true;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (pst != null) {
                    try {
                        pst.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }

            if (!calorieDataAvailable && !bmiDataAvailable) {
                lbCalorieBMIlSuggestion.setText("No data available for calories and BMI.");
            } else if (!calorieDataAvailable) {
                lbCalorieBMIlSuggestion.setText("No data available for calories.");
            } else if (!bmiDataAvailable) {
                lbCalorieBMIlSuggestion.setText("No data available for BMI.");
            } else {
                if (Total > 2500 && BMIData > 25) {
                    lbCalorieBMIlSuggestion.setText("You are eating too many calories with a high BMI (25 - Overweight).");
                } else if (Total < 1500 && BMIData < 18.5) {
                    lbCalorieBMIlSuggestion.setText("You need to consume more calories; your BMI is under 18.5 (Underweight).");
                } else {
                    lbCalorieBMIlSuggestion.setText("No suggestions! Keep going, you're doing great.");
                }
            }
        }
    }

    public void updateLblCalorieTrackerCalorieCalculator() {
        con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
        if (con != null) {
            String sqlCalorieResult2 = "Select id, Result, User from CalorieCalculator WHERE User = '" + LoggedInUser + "' ORDER BY id DESC LIMIT 1 ";
            System.out.println(sqlCalorieResult2);
            double CalorieResult = 0;
            try {
                pst = con.prepareStatement(sqlCalorieResult2);
                rs = pst.executeQuery();

                while (rs.next()) {
                    CalorieResult = rs.getDouble("Result");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (pst != null) {
                    try {
                        pst.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }

            String sqlCO = "SELECT Calories FROM CalorieTrack WHERE User = '" + LoggedInUser + "'  AND Date = (SELECT Date FROM CalorieTrack WHERE User = '" + LoggedInUser + "' ORDER BY Date DESC LIMIT 1 );";
            System.out.println(sqlCO);
            int Total1 = 0;
            try {
                pst = con.prepareStatement(sqlCO);
                rs = pst.executeQuery();

                while (rs.next()) {
                    int CalorieData1 = rs.getInt("Calories");
                    Total1 = Total1 + CalorieData1;
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (pst != null) {
                    try {
                        pst.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }

            if (CalorieResult == 0) {
                lblCalorieGoalToday.setText("You have still to calculate your total recommneded calories");
            } else if (Total1 > CalorieResult) {
                lblCalorieGoalToday.setText("You have consumed more calories than recommended in your most recent logged day of calories.");
            } else if (Total1 < CalorieResult) {
                lblCalorieGoalToday.setText("You are still within your calories for the day");
            } else {
                lblCalorieGoalToday.setText("You have consumed fewer calories than recommended.");
            }
        }
    }

    public void updateLblGeneratedQuotes() {
        String sqlQuoteCount = "SELECT COUNT(*) AS QuoteCount FROM RandomQuote WHERE User = ?";
        System.out.println(sqlQuoteCount);
        int quoteCount = 0;
        try {
            con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
            pst = con.prepareStatement(sqlQuoteCount);
            pst.setString(1, LoggedInUser);
            rs = pst.executeQuery();

            if (rs.next()) {
                quoteCount = rs.getInt("QuoteCount");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

        lblGeneratedQuotes.setText("Quotes Generated by " + LoggedInUser + ": " + quoteCount);
    }

    public void updateLblGeneratedReminders() {
        String sqlReminderCount = "SELECT COUNT(*) AS ReminderCount FROM Reminder WHERE User = ?";
        System.out.println(sqlReminderCount);
        int reminderCount = 0;
        try {
            con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
            pst = con.prepareStatement(sqlReminderCount);
            pst.setString(1, LoggedInUser);
            rs = pst.executeQuery();

            if (rs.next()) {
                reminderCount = rs.getInt("ReminderCount");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

        lblGeneratedReminders.setText("Reminders Set by " + LoggedInUser + ": " + reminderCount);
    }

    public void ReccomendedCaloriesLabel() {
        con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
        if (con != null) {
            String sqlCalorieResult2 = "Select id, Result, User from CalorieCalculator WHERE User = '" + LoggedInUser + "' ORDER BY id DESC LIMIT 1 ";
            System.out.println(sqlCalorieResult2);
            double CalorieResult = 0;
            try {
                pst = con.prepareStatement(sqlCalorieResult2);
                rs = pst.executeQuery();

                while (rs.next()) {
                    CalorieResult = rs.getDouble("Result");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (pst != null) {
                    try {
                        pst.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
            lblRecentCalorieRecommendation.setText("Most recent calorie recommendation for " + LoggedInUser + ": " + CalorieResult);
        }
    }

    public void AverageCalories() {
        con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
        if (con != null) {
            String sqlAverageCalories = "SELECT AVG(Calories) AS AverageCalories FROM CalorieTrack WHERE User = ?";
            System.out.println(sqlAverageCalories);
            double averageCalories = 0.0;
            try {
                pst = con.prepareStatement(sqlAverageCalories);
                pst.setString(1, LoggedInUser);
                rs = pst.executeQuery();

                if (rs.next()) {
                    averageCalories = rs.getDouble("AverageCalories");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (pst != null) {
                    try {
                        pst.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
            jLabel24.setText("Average Meal Calories for " + LoggedInUser + ": " + averageCalories);
        }
    }

 public void updateLblAverageCaloriesPerDay() {
    String sqlAverageCalories = "SELECT AVG(DailyCalories) AS AverageCaloriesPerDay FROM (SELECT SUM(Calories) / COUNT(DISTINCT Date) AS DailyCalories FROM CalorieTrack WHERE User = ? GROUP BY Date) AS DailyCalorieSum";
    System.out.println(sqlAverageCalories);
    double averageCaloriesPerDay = 0.0;
    PreparedStatement pst = null;
    ResultSet rs = null;
    Connection con = null;
    try {
        con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
        if (con != null) {
            pst = con.prepareStatement(sqlAverageCalories);
            pst.setString(1, LoggedInUser);
            rs = pst.executeQuery();

            if (rs.next()) {
                averageCaloriesPerDay = rs.getDouble("AverageCaloriesPerDay");
            }

            lblAverageCaloriesPerDay.setText("Average Calories Consumed per Day for " + LoggedInUser + ": " + averageCaloriesPerDay);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e);
    } finally {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (pst != null) {
            try {
                pst.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (con != null) {
            try {
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}

    public void graphCalories() {
        String sqlCalorieData = "SELECT Date, SUM(Calories) AS TotalCalories FROM CalorieTrack WHERE User = ? GROUP BY Date";
        System.out.println(sqlCalorieData);
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        HashSet<String> uniqueDates = new HashSet<>();
        PreparedStatement pst = null;
        ResultSet rs = null;
        Connection con = null;
        try {
            con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
            if (con != null) {
                pst = con.prepareStatement(sqlCalorieData);
                pst.setString(1, LoggedInUser);
                rs = pst.executeQuery();

                while (rs.next()) {
                    String date = rs.getString("Date");
                    int totalCalories = rs.getInt("TotalCalories");
                    dataset.addValue(totalCalories, "Calories", date);
                    uniqueDates.add(date);
                }

                if (uniqueDates.size() < 2) {
                    JOptionPane.showMessageDialog(null, "You need to track calories on at least two different dates to generate a chart.");
                } else {
                    JFreeChart lineChart = ChartFactory.createLineChart(
                            "Calorie Consumption",
                            "Date",
                            "Calories",
                            dataset,
                            PlotOrientation.VERTICAL,
                            true,
                            true,
                            false
                    );

                    ChartFrame frame = new ChartFrame("Calorie Consumption Chart", lineChart);
                    frame.addWindowListener(new WindowAdapter() {
                        @Override
                        public void windowClosing(WindowEvent e) {
                            frame.dispose();
                        }
                    });
                    frame.setDefaultCloseOperation(ChartFrame.DO_NOTHING_ON_CLOSE);
                    frame.pack();
                    frame.setVisible(true);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void barChartCalories() {
        String sqlCalorieData = "SELECT Date, SUM(Calories) AS TotalCalories FROM CalorieTrack WHERE User = ? GROUP BY Date";
        System.out.println(sqlCalorieData);
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        PreparedStatement pst = null;
        ResultSet rs = null;
        Connection con = null;
        try {
            con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
            if (con != null) {
                pst = con.prepareStatement(sqlCalorieData);
                pst.setString(1, LoggedInUser);
                rs = pst.executeQuery();

                while (rs.next()) {
                    String date = rs.getString("Date");
                    int totalCalories = rs.getInt("TotalCalories");
                    dataset.addValue(totalCalories, "Calories", date);
                }

                if (dataset.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(null, "You need to track calories to generate a chart.");
                } else {
                    JFreeChart barChart = ChartFactory.createBarChart(
                            "Calorie Consumption",
                            "Date",
                            "Calories",
                            dataset,
                            PlotOrientation.VERTICAL,
                            true,
                            true,
                            false
                    );

                    ChartFrame frame = new ChartFrame("Calorie Consumption Chart", barChart);
                    frame.addWindowListener(new WindowAdapter() {
                        @Override
                        public void windowClosing(WindowEvent e) {
                            frame.dispose();
                        }
                    });
                    frame.setDefaultCloseOperation(ChartFrame.DO_NOTHING_ON_CLOSE);
                    frame.pack();
                    frame.setVisible(true);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void graphBMI() {
        String sqlBmiData = "SELECT Date, BMI FROM CalculatorBMI WHERE User = ?";
        System.out.println(sqlBmiData);
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        HashSet<String> uniqueDates = new HashSet<>();
        PreparedStatement pst = null;
        ResultSet rs = null;
        Connection con = null;
        try {
            con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
            if (con != null) {
                pst = con.prepareStatement(sqlBmiData);
                pst.setString(1, LoggedInUser);
                rs = pst.executeQuery();

                while (rs.next()) {
                    String date = rs.getString("Date");
                    double bmi = rs.getDouble("BMI");
                    dataset.addValue(bmi, "BMI", date);
                    uniqueDates.add(date);
                }

                if (uniqueDates.size() < 2) {
                    JOptionPane.showMessageDialog(null, "You need to have more than one entry to generate the BMI chart.");
                } else {
                    JFreeChart lineChart = ChartFactory.createLineChart(
                            "BMI Chart",
                            "Date",
                            "BMI",
                            dataset,
                            PlotOrientation.VERTICAL,
                            true,
                            true,
                            false
                    );

                    ChartFrame frame = new ChartFrame("BMI Chart", lineChart);
                    frame.addWindowListener(new WindowAdapter() {
                        @Override
                        public void windowClosing(WindowEvent e) {
                            frame.dispose();
                        }
                    });
                    frame.setDefaultCloseOperation(ChartFrame.DO_NOTHING_ON_CLOSE);
                    frame.pack();
                    frame.setVisible(true);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void barChartBMI() {
        String sqlBmiData = "SELECT Date, BMI FROM CalculatorBMI WHERE User = ?";
        System.out.println(sqlBmiData);
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        HashSet<String> uniqueDates = new HashSet<>();
        PreparedStatement pst = null;
        ResultSet rs = null;
        Connection con = null;
        try {
            con = com.mycompany.betteru.betteru.DbConnection.ConnectionDB();
            if (con != null) {
                pst = con.prepareStatement(sqlBmiData);
                pst.setString(1, LoggedInUser);
                rs = pst.executeQuery();

                while (rs.next()) {
                    String date = rs.getString("Date");
                    double bmi = rs.getDouble("BMI");
                    dataset.addValue(bmi, "BMI", date);
                    uniqueDates.add(date);
                }

                if (uniqueDates.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "No BMI data available for the user.");
                } else {
                    JFreeChart barChart = ChartFactory.createBarChart(
                            "BMI Chart",
                            "Date",
                            "BMI",
                            dataset,
                            PlotOrientation.VERTICAL,
                            true,
                            true,
                            false
                    );

                    ChartFrame frame = new ChartFrame("BMI Chart", barChart);
                    frame.addWindowListener(new WindowAdapter() {
                        @Override
                        public void windowClosing(WindowEvent e) {
                            frame.dispose();
                        }
                    });
                    frame.setDefaultCloseOperation(ChartFrame.DO_NOTHING_ON_CLOSE);
                    frame.pack();
                    frame.setVisible(true);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (pst != null) {
                try {
                    pst.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton generateBMIBarChart;
    private javax.swing.JButton generateBMIGraph;
    private javax.swing.JButton generateCalorieConsumptionBarChart;
    private javax.swing.JButton generateCalorieConsumptionGraph;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JLabel lbCalorieBMIlSuggestion;
    private javax.swing.JLabel lblAverageCaloriesPerDay;
    private javax.swing.JLabel lblCalorieGoalToday;
    private javax.swing.JLabel lblGeneratedQuotes;
    private javax.swing.JLabel lblGeneratedReminders;
    private javax.swing.JLabel lblRecentCalorieRecommendation;
    // End of variables declaration//GEN-END:variables
}
